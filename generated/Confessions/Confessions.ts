// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Confessed extends ethereum.Event {
  get params(): Confessed__Params {
    return new Confessed__Params(this);
  }
}

export class Confessed__Params {
  _event: Confessed;

  constructor(event: Confessed) {
    this._event = event;
  }

  get confession(): string {
    return this._event.parameters[0].value.toString();
  }

  get num(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Confessions extends ethereum.SmartContract {
  static bind(address: Address): Confessions {
    return new Confessions("Confessions", address);
  }

  getCounter(): BigInt {
    let result = super.call("getCounter", "getCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCounter", "getCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConfessCall extends ethereum.Call {
  get inputs(): ConfessCall__Inputs {
    return new ConfessCall__Inputs(this);
  }

  get outputs(): ConfessCall__Outputs {
    return new ConfessCall__Outputs(this);
  }
}

export class ConfessCall__Inputs {
  _call: ConfessCall;

  constructor(call: ConfessCall) {
    this._call = call;
  }

  get theConfession(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ConfessCall__Outputs {
  _call: ConfessCall;

  constructor(call: ConfessCall) {
    this._call = call;
  }
}
